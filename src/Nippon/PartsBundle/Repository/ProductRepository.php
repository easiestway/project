<?php

namespace Nippon\PartsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Nippon\PartsBundle\Entity\Product;
use Nippon\PartsBundle\Entity\Supplier;
use Nippon\PartsBundle\Utils\Search;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    public function generateCanonical($partNumber)
    {
        return Search::makeCanonical($partNumber);
    }

    public function generateAnalogue($canonical, $supplierId)
    {
        return implode('_', array($supplierId, $canonical));
    }

    public function getOrCreateProduct(Supplier $supplier, $number, $description = '')
    {
        $canonical = $this->generateCanonical($number);
        $product   = $this->findOneBy(array('supplierId' => $supplier->getId(), 'canonical' => $canonical));
        if (!$product) {
            if (!$supplier->getId()) {
                $this->getEntityManager()->flush();
            }
            $product = new Product();
            $product->setSupplier($supplier);
            $product->setOriginal($number);
            $product->setDescription($description);
            $product->setCanonical($canonical);
            $product->setAnalogue($this->generateAnalogue($canonical, $supplier->getId()));
            $this->getEntityManager()->persist($product);
        } elseif ($description) {
            if (!$product->getDescription()) {
                $product->setDescription($description);
                $this->getEntityManager()->persist($product);
            }
        }

        return $product;
    }

    public function linkGroup(Product $product, $group, $exclude = null)
    {
        if ($group && ($product->getAnalogue() != $group)) {
            $qb = $this->createQueryBuilder('p');
            $qb->update()
                ->set('p.analogue', $qb->expr()->literal($product->getAnalogue()))
                ->where('p.analogue = :analogue')
                ->setParameter('analogue', $group);
            if ($exclude) {
                $qb->andWhere('p.id != :id')
                    ->setParameter('id', $exclude);
            }
            $qb->getQuery()->execute();
        }
    }

    public function linkProduct(Product $product, Product $connect)
    {
        $analogue = $this->generateAnalogue($connect->getCanonical(), $connect->getSupplierId());

        if ($analogue == $connect->getAnalogue()) {
            if ($head = $this->getNewHead($connect)) {
                //exclude from my group to another head
                $this->exclude($connect, $head);
            }
        }
        $connect->setAnalogue($product->getAnalogue());
        $this->getEntityManager()->persist($connect);
        $this->getEntityManager()->flush();
    }

    public function exclude(Product $product, Product $head)
    {
        $analogue = $this->generateAnalogue($product->getCanonical(), $product->getSupplierId());

        if ($analogue == $product->getAnalogue()) {
            $head->setAnalogue($this->generateAnalogue($head->getCanonical(), $head->getSupplierId()));
            $this->linkGroup($head, $analogue, $product->getId());
        } else {
            $product->setAnalogue($analogue);
            $this->getEntityManager()->persist($product);
            $this->getEntityManager()->flush();
        }

    }

    public function getNewHead(Product $product)
    {
        return $this->createQueryBuilder('p')
            ->where('p.id != :id')
            ->andWhere('p.analogue = :analogue')
            ->setParameters(array(
                'id'       => $product->getId(),
                'analogue' => $product->getAnalogue()
            ))
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
